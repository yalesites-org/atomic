<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\node\Entity\Node;

/**
 * Implements hook_preprocess_region().
 */
function atomic_preprocess_region(&$variables) {
  $variables['site_name'] = \Drupal::config('system.site')->get('name');
}

/**
 * Implements hook_preprocess_menu().
 */
function atomic_preprocess_menu(&$variables, $hook) {
  $current_path = \Drupal::request()->getRequestUri();
  $items = $variables['items'];
  foreach ($items as $key => $item) {
    if ($item['url']->toString() == $current_path) {
      // Set top level.
      $variables['items'][$key]['is_active'] = TRUE;
    }
    if ($item['below']) {
      foreach ($item['below'] as $secondaryKey => $secondaryItem) {
        if ($secondaryItem['url']->toString() == $current_path) {
          // Set secondary level.
          $variables['items'][$key]['below'][$secondaryKey]['is_active'] = TRUE;
        }
        if ($secondaryItem['below']) {
          foreach ($secondaryItem['below'] as $tertiaryKey => $tertiaryItem) {
            if ($tertiaryItem['url']->toString() == $current_path) {
              // Set tertiary level.
              $variables['items'][$key]['below'][$secondaryKey]['below'][$tertiaryKey]['is_active'] = TRUE;
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_pager().
 *
 * Adds total pages to the pager variables.
 */
function atomic_preprocess_pager(array &$variables) {
  $element = $variables['pager']['#element'];
  $pager_manager = \Drupal::service('pager.manager');
  $pager = $pager_manager->getPager($element);
  $variables['pager']['#total_pages'] = $pager->getTotalPages();
}

/**
 * Implements hook_theme_suggestions_hook_alter() for containers.
 */
function atomic_theme_suggestions_container_alter(array &$suggestions, array &$variables) {
  $type = '';
  $name = '';

  if (isset($variables['element']['#type'])) {
    // Get the element type.
    $type = $variables['element']['#type'];

    // If type is defined, but not a generic "container" suggest the type.
    if ($type !== 'container') {
      $suggestions[] = 'container__' . $type;
    }

    if (isset($variables['element']['#name'])) {
      // Get the element name.
      $name = $variables['element']['#name'];

      // If both type and name are defined, create a suggestion with both.
      $suggestions[] = 'container__' . $type . '__' . $name;
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function atomic_preprocess_node(&$variables) {
  if ($variables['node']->getType() == 'post') {
    $date = strtotime($variables['node']->field_publish_date->first()->getValue()['value']);
    $variables['date_formatted'] = \Drupal::service('date.formatter')->format($date, '', 'c');
  }
}

/**
 * Implements hook_preprocess_paragraph__accordion_item().
 *
 * Inject the heading_level based on the parent's heading presence.
 */
function atomic_preprocess_paragraph__accordion_item(&$variables) {
  if ($accordion = $variables['paragraph']->getParentEntity()) {
    if ($accordion->hasField('field_heading')) {
      $heading = $accordion->field_heading->value;
      $variables['attributes']['heading_level'] = empty($heading) ? 2 : 3;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for field templates.
 */
function atomic_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  // Check if the field is attached to a node.
  if ($variables['element']['#entity_type'] == 'node') {
    $view_mode = $variables['element']['#view_mode'];
    $field_name = $variables['element']['#field_name'];

    // Add a theme suggestion for the field based on the parent node's view mode.
    $suggestions[] = 'field__' . $variables['element']['#entity_type'] . '__' . $field_name . '__' . $view_mode;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Attempt to pre-set the main content ID based on whether
 * the node associated is in a content collection.
 */
function atomic_preprocess_html(array &$variables) {
  $variables['main_content_id'] = '#main-content';
  $variables['secondary_nav_present'] = FALSE;
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if ($node instanceof Node && $node->bundle() == 'page') {

      if ($node->book) {
        $variables['secondary_nav_present'] = TRUE;
        $variables['main_content_id'] = '#main-content-after-secondary-nav';
      }
    }
  }
}
