@use '../../../00-tokens/tokens';
@use '../../../00-tokens/functions/map';

$global-video-bg-themes: map.deep-get(tokens.$tokens, 'global-themes');
$component-video-bg-themes: map.deep-get(tokens.$tokens, 'component-themes');
$video-background-icon-size: 2rem;
$video-background-icon-size-sm: 1.4rem;
$break-video-banner: tokens.$break-m;
$break-video-banner-max: $break-video-banner - 0.05;

.video-background {
  width: 100%;
  height: 100%;
  position: relative;

  video {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  // Component themes defaults: iterate over each component theme to establish
  // default variables.
  @each $theme, $value in $component-video-bg-themes {
    &[data-component-theme='#{$theme}'] {
      --color-backgound: var(--color-video-background);
      --color-video-svg: var(--color-basic-white);
    }
  }

  // Global themes: set color slots for each theme
  // This establishes `--color-slot-` variables name-spaced to the selector
  // in which it is used. We can map component-level variables to global-level
  // `--color-slot-` variables.
  @each $globalTheme, $value in $global-video-bg-themes {
    [data-global-theme='#{$globalTheme}'] & {
      --color-slot-one: var(--global-themes-#{$globalTheme}-colors-slot-one);
      --color-slot-two: var(--global-themes-#{$globalTheme}-colors-slot-two);
      --color-slot-three: var(
        --global-themes-#{$globalTheme}-colors-slot-three
      );
      --color-slot-four: var(--global-themes-#{$globalTheme}-colors-slot-four);
      --color-slot-five: var(--global-themes-#{$globalTheme}-colors-slot-five);
    }
  }

  // Component theme overrides: set specific component themes overrides
  /// define component name spaced variables and map them to global theme slots.
  &[data-component-theme='one'] {
    --color-video-background: var(--color-slot-one);
    --color-video-svg: var(--color-basic-white);
  }

  &[data-component-theme='two'] {
    --color-video-background: var(--color-slot-four);
    --color-video-svg: var(--color-gray-800);
  }

  &[data-component-theme='three'] {
    --color-video-background: var(--color-slot-five);
    --color-video-svg: var(--color-basic-white);
  }
}

.video-background__control {
  display: flex;
  align-items: center;
  position: absolute;
  bottom: var(--size-spacing-4);
  right: var(--size-spacing-4);
  border: 0;
  background: transparent;
  padding: var(--size-spacing-3);
  color: inherit;
  z-index: 1;

  &:focus-visible {
    @include tokens.focus-styles;
  }

  [data-grand-hero-overlay-variation='contained'] & {
    @media (max-width: $break-video-banner-max) {
      top: var(--size-spacing-6);
      right: var(--size-spacing-6);
      bottom: unset;
    }
  }

  [data-grand-hero-overlay-variation='full'] & {
    border: 1px solid var(--color-basic-white);
  }

  [data-body-frozen] & {
    z-index: 0;
  }

  svg {
    fill: var(--color-video-svg);
    width: $video-background-icon-size-sm;
    height: $video-background-icon-size-sm;

    @media (min-width: $break-video-banner) {
      width: $video-background-icon-size;
      height: $video-background-icon-size;

      &.video-background__icon--play {
        padding-inline-start: var(--size-spacing-3);
        padding-inline-end: var(--size-spacing-3);
      }
    }
  }

  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    background-color: var(--color-video-background);
    opacity: 0.85;
    z-index: -1;
  }

  &:hover::after {
    opacity: 1;
  }

  @media (min-width: $break-video-banner) {
    bottom: var(--size-spacing-7);
    right: var(--size-spacing-7);
  }
}

.video-background__control--play {
  [is-playing='false'] & {
    display: flex;
  }

  [is-playing='true'] & {
    display: none;
  }
}

.video-background__control--pause {
  display: none;

  [is-playing='false'] & {
    display: none;
  }

  [is-playing='true'] & {
    display: flex;
  }
}
